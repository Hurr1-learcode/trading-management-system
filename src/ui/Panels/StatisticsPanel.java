// Panel th·ªëng k√™ v√† b·∫£ng giao d·ªãch ƒë∆°n gi√° l·ªõn
package ui.Panels;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Font;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import dto.ThongKeDTO;
import model.GiaoDich;
import ui.Utils.UIUtils;

public class StatisticsPanel extends JPanel {
    
    // Components cho th·ªëng k√™
    private JTextArea txtThongKe;
    private JButton btnCapNhatThongKe;
    private JButton btnThongKeHomNay;
    private JButton btnThongKeThangNay;
    private JButton btnThongKeTatCa;
    private JButton btnThongKeTheoNgay;
    private JButton btnInDanhSach;
    private JTextField txtNgayThongKe;
    
    // B·∫£ng giao d·ªãch ƒë∆°n gi√° l·ªõn
    private JTable tblDonGiaLon;
    private DefaultTableModel thongKeTableModel;
    
    public StatisticsPanel() {
        initializeComponents();
        setupLayout();
    }
    
    /**
     * Kh·ªüi t·∫°o c√°c component
     */
    private void initializeComponents() {
        // Kh·ªüi t·∫°o text area hi·ªÉn th·ªã th·ªëng k√™
        txtThongKe = new JTextArea(10, 40);
        txtThongKe.setEditable(false);
        txtThongKe.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        
        // Kh·ªüi t·∫°o c√°c n√∫t ch·ª©c nƒÉng
        btnCapNhatThongKe = new JButton("C·∫≠p nh·∫≠t th·ªëng k√™");
        btnThongKeHomNay = new JButton("H√¥m nay");
        btnThongKeThangNay = new JButton("Th√°ng n√†y");
        btnThongKeTatCa = new JButton("T·∫•t c·∫£");
        btnThongKeTheoNgay = new JButton("Theo ng√†y");
        btnInDanhSach = new JButton("In danh s√°ch");
        
        // Text field cho ng√†y th·ªëng k√™
        txtNgayThongKe = new JTextField("2025-08-05", 10);
        
        // B·∫£ng giao d·ªãch ƒë∆°n gi√° l·ªõn
        String[] thongKeColumns = {"M√£ GD", "Ng√†y", "ƒê∆°n gi√°", "S·ªë l∆∞·ª£ng", "Lo·∫°i", "Th√†nh ti·ªÅn"};
        thongKeTableModel = new DefaultTableModel(thongKeColumns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tblDonGiaLon = new JTable(thongKeTableModel);
        
        // Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc c√°c c·ªôt
        tblDonGiaLon.getColumnModel().getColumn(0).setPreferredWidth(80);  // M√£ GD
        tblDonGiaLon.getColumnModel().getColumn(1).setPreferredWidth(100); // Ng√†y
        tblDonGiaLon.getColumnModel().getColumn(2).setPreferredWidth(120); // ƒê∆°n gi√°
        tblDonGiaLon.getColumnModel().getColumn(3).setPreferredWidth(80);  // S·ªë l∆∞·ª£ng
        tblDonGiaLon.getColumnModel().getColumn(4).setPreferredWidth(80);  // Lo·∫°i
        tblDonGiaLon.getColumnModel().getColumn(5).setPreferredWidth(120); // Th√†nh ti·ªÅn
    }
    
    /**
     * Thi·∫øt l·∫≠p layout
     */
    private void setupLayout() {
        setLayout(new BorderLayout());
        
        // Panel tr√™n: Th·ªëng k√™ t·ªïng quan
        JPanel topPanel = createStatisticsPanel();
        
        // Panel d∆∞·ªõi: B·∫£ng giao d·ªãch ƒë∆°n gi√° l·ªõn
        JPanel bottomPanel = createHighValueTransactionsPanel();
        
        // S·ª≠ d·ª•ng JSplitPane ƒë·ªÉ chia ƒë√¥i
        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, topPanel, bottomPanel);
        splitPane.setDividerLocation(250);
        splitPane.setResizeWeight(0.4); // 40% cho panel th·ªëng k√™, 60% cho b·∫£ng
        
        add(splitPane, BorderLayout.CENTER);
    }
    
    /**
     * T·∫°o panel th·ªëng k√™ t·ªïng quan
     */
    private JPanel createStatisticsPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createTitledBorder("Th·ªëng k√™ t·ªïng quan"));
        
        // Text area hi·ªÉn th·ªã th·ªëng k√™
        JScrollPane scrollPane = new JScrollPane(txtThongKe);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        // Panel ch·ª©a c√°c n√∫t
        JPanel buttonPanel = createStatisticsButtonPanel();
        panel.add(buttonPanel, BorderLayout.SOUTH);
        
        return panel;
    }
    
    /**
     * T·∫°o panel ch·ª©a c√°c n√∫t th·ªëng k√™
     */
    private JPanel createStatisticsButtonPanel() {
        JPanel panel = new JPanel(new FlowLayout());
        
        panel.add(new JLabel("Ng√†y:"));
        panel.add(txtNgayThongKe);
        panel.add(btnThongKeTheoNgay);
        panel.add(new JLabel("‚îÇ"));
        panel.add(btnThongKeHomNay);
        panel.add(btnThongKeThangNay);
        panel.add(btnThongKeTatCa);
        panel.add(btnCapNhatThongKe);
        panel.add(new JLabel("‚îÇ"));
        panel.add(btnInDanhSach);
        
        return panel;
    }
    
    /**
     * T·∫°o panel b·∫£ng giao d·ªãch ƒë∆°n gi√° l·ªõn
     */
    private JPanel createHighValueTransactionsPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createTitledBorder("Giao d·ªãch c√≥ ƒë∆°n gi√° > 1 t·ª∑"));
        
        JScrollPane scrollPane = new JScrollPane(tblDonGiaLon);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        return panel;
    }
    
    /**
     * Hi·ªÉn th·ªã th·ªëng k√™ t·ªïng quan
     */
    public void displayStatistics(ThongKeDTO thongKe) {
        displayStatistics(thongKe, "T·ªîNG QUAN");
    }
    
    /**
     * Hi·ªÉn th·ªã th·ªëng k√™ v·ªõi ti√™u ƒë·ªÅ t√πy ch·ªânh
     */
    public void displayStatistics(ThongKeDTO thongKe, String kieuThongKe) {
        if (thongKe == null) {
            txtThongKe.setText("Kh√¥ng c√≥ d·ªØ li·ªáu th·ªëng k√™");
            return;
        }
        
        StringBuilder sb = new StringBuilder();
        sb.append("=== TH·ªêNG K√ä ").append(kieuThongKe).append(" ===\n\n");
        sb.append(String.format("üìä T·ªïng s·ªë giao d·ªãch v√†ng: %d\n", thongKe.getTongSoLuongVang()));
        sb.append(String.format("üí± T·ªïng s·ªë giao d·ªãch ti·ªÅn t·ªá: %d\n", thongKe.getTongSoLuongTienTe()));
        sb.append(String.format("üìà Trung b√¨nh th√†nh ti·ªÅn ti·ªÅn t·ªá: %s VNƒê\n", 
                UIUtils.formatCurrency(thongKe.getTrungBinhThanhTienTienTe())));
        sb.append(String.format("üí∞ S·ªë GD ƒë∆°n gi√° > 1 t·ª∑: %d\n\n", thongKe.getSoGiaoDichDonGiaLonHon1Ty()));
        
        sb.append("=== DOANH THU ===\n");
        sb.append(String.format("ü•á T·ªïng th√†nh ti·ªÅn v√†ng: %s VNƒê\n", 
                UIUtils.formatCurrency(thongKe.getTongThanhTienVang())));
        sb.append(String.format("üíµ T·ªïng th√†nh ti·ªÅn ti·ªÅn t·ªá: %s VNƒê\n", 
                UIUtils.formatCurrency(thongKe.getTongThanhTienTienTe())));
        sb.append(String.format("üíé T·ªïng doanh thu: %s VNƒê\n", 
                UIUtils.formatCurrency(thongKe.getTongThanhTienTatCa())));
        
        txtThongKe.setText(sb.toString());
    }
    
    /**
     * Hi·ªÉn th·ªã th·ªëng k√™ h√¥m nay
     */
    public void displayTodayStatistics(ThongKeDTO thongKe) {
        String today = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
        displayStatistics(thongKe, "H√îM NAY (" + today + ")");
    }
    
    /**
     * Hi·ªÉn th·ªã th·ªëng k√™ th√°ng n√†y
     */
    public void displayMonthStatistics(ThongKeDTO thongKe) {
        LocalDate now = LocalDate.now();
        String monthYear = now.getMonth().getValue() + "/" + now.getYear();
        displayStatistics(thongKe, "TH√ÅNG N√ÄY (" + monthYear + ")");
    }
    
    /**
     * Hi·ªÉn th·ªã th·ªëng k√™ theo ng√†y
     */
    public void displayDateStatistics(ThongKeDTO thongKe, LocalDate date) {
        String dateStr = date.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
        displayStatistics(thongKe, "NG√ÄY " + dateStr);
    }
    
    /**
     * Load danh s√°ch giao d·ªãch ƒë∆°n gi√° l·ªõn
     */
    public void loadHighValueTransactions(List<GiaoDich> giaoDichs) {
        thongKeTableModel.setRowCount(0);
        
        if (giaoDichs == null || giaoDichs.isEmpty()) {
            return;
        }
        
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        
        for (GiaoDich gd : giaoDichs) {
            Object[] row = new Object[6];
            row[0] = gd.getMaGiaoDich();
            row[1] = gd.getNgayGiaoDich().format(formatter);
            row[2] = UIUtils.formatCurrency(gd.getDonGia());
            row[3] = gd.getSoLuong();
            row[4] = gd.getLoaiGiaoDich();
            row[5] = UIUtils.formatCurrency(gd.tinhThanhTien());
            
            thongKeTableModel.addRow(row);
        }
    }
    
    /**
     * L·∫•y ng√†y ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ th·ªëng k√™
     */
    public String getSelectedDate() {
        return txtNgayThongKe.getText().trim();
    }
    
    /**
     * ƒê·∫∑t ng√†y th·ªëng k√™
     */
    public void setSelectedDate(String date) {
        txtNgayThongKe.setText(date);
    }
    
    /**
     * X√≥a n·ªôi dung th·ªëng k√™
     */
    public void clearStatistics() {
        txtThongKe.setText("");
        thongKeTableModel.setRowCount(0);
    }
    
    // Getters cho c√°c n√∫t
    public JButton getBtnCapNhatThongKe() { return btnCapNhatThongKe; }
    public JButton getBtnThongKeHomNay() { return btnThongKeHomNay; }
    public JButton getBtnThongKeThangNay() { return btnThongKeThangNay; }
    public JButton getBtnThongKeTatCa() { return btnThongKeTatCa; }
    public JButton getBtnThongKeTheoNgay() { return btnThongKeTheoNgay; }
    public JButton getBtnInDanhSach() { return btnInDanhSach; }
    
    // Getters cho text area v√† b·∫£ng (ƒë·ªÉ export)
    public JTextArea getTxtThongKe() { return txtThongKe; }
    public JTable getTblDonGiaLon() { return tblDonGiaLon; }
    public DefaultTableModel getThongKeTableModel() { return thongKeTableModel; }
}
